import Head from "next/head";
import { useRouter } from "next/router";
import Axios from "axios";
import { useEffect, useState, useContext } from "react";
import { AuthContext } from "../helpers/AuthContext";
import { useAuthDispatch, useAuthState } from "../context/auth";

export default function Home({ userData }) {
    const { user, authenticated, loading } = useAuthState();
    const router = useRouter();
    const dispatch = useAuthDispatch();

    useEffect(() => {
        dispatch("CHANGE_TITLE", "");
        dispatch("HAS_BUTTON_FALSE");
    }, []);

    const logout = async () => {
        await Axios.get("http://localhost:3001/user/logout").then(() => {
            dispatch("LOGOUT");
            router.push("/login");
        });
    };

    // console.log(userData);

    return (
        <div className="flex flex-col items-center justify-center min-h-[calc(100vh-56px)] py-4">
            <Head>
                <title>Home</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
            </Head>

            {authenticated && !loading && (
                <>
                    <p>Logged in as: {!loading ? user?.username : "loading"}</p>
                </>
            )}
            {!authenticated && !loading && (
                <div className="flex flex-col items-center">
                    <p className="mb-4">You are not logged in</p>
                    <button
                        onClick={() => router.push("/login")}
                        className="px-6 py-1 text-white bg-blue-500 active:ring"
                    >
                        Go to login
                    </button>
                </div>
            )}
        </div>
    );
}

export const getServerSideProps = async (context) => {
    const data = await fetch("http://localhost:3001/user/me", {
        headers: { Cookie: context.req.headers.cookie },
    }).then((res) => res.json());

    // Fires when no user is currently logged in
    if (data.error) {
        return {
            redirect: {
                permanent: false,
                destination: "/login",
            },
        };
    }

    return {
        props: {
            userData: data,
        },
    };
};
